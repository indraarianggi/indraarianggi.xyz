[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.1","content-config-digest","a91d7615349efdda","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://indraarianggi.xyz\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,33,34,43,44,58,59,73,74,84,85],"basic-formatting-and-syntax-2",{"id":11,"data":13,"body":29,"filePath":30,"digest":31,"legacyId":32,"deferredRender":28},{"title":14,"excerpt":15,"tags":16,"coverImage":21,"author":22,"time":25,"published":28},"Basic Writing and Formatting Syntax 2","Practical techniques for improving React application performance and user experience through optimization strategies.",[17,18,19,20],"React","Performance","Optimization","Web Development","/placeholder.svg?height=600&width=1200",{"name":23,"avatar":24},"Indra Arianggi","/images/profile-avatar.png",{"created":26,"updated":27},"2024-09-18T19:24:46.167Z","2024-10-17T09:56:06.854Z",true,"> This guide is an abstraction from Github's Formatting Syntax documentation.[^1]\\\n> We are using it to show the various styles that we have available.\n\n# Headings\n\nTo create a heading, add one to two \u003Ckbd>#\u003C/kbd> symbols before your heading text. The number of \u003Ckbd>#\u003C/kbd> you use will determine the hierarchy level and typeface size of the heading.\n\n```text copy\n# Heading 1\n# Heading 2\n```\n\n## Heading 2\n\n### Heading 3\n\n#### Heading 4\n\n##### Heading 5\n\n# Styling Text\n\nYou can indicate emphasis with bold, italic, strikethrough, subscript, or superscript text in comment fields and .md files.\n\n```text\n**Bold**\n*Italic*\n~~Strikethrough~~\n\u003Csub>Subscript\u003C/sub>\n\u003Csup>Superscript\u003C/sup>\n\u003Ckbd>⌘\u003C/kbd>\u003Ckbd>K\u003C/kbd>\n```\n\n# Quoting Text\n\nYou can quote text with a \u003Ckbd>>\u003C/kbd>.\n\n```text\nText that is not a quote\n> Text that is a quote\n```\n\n# Links\n\nYou can create an inline link by wrapping link text in brackets, and then wrapping the URL in parentheses.\n\n```text\n[Link](https://www.youtube.com/watch?v=dQw4w9WgXcQ)\n```\n\n# Lists\n\nYou can make an unordered list by preceding one or more lines of text with \u003Ckbd>-\u003C/kbd>.\n\n```text\n- George Washington\n- John Adams\n- Thomas Jefferson\n```\nTo order your list, precede each line with a number.\n\n```text\n1. James Madison\n2. James Monroe\n3. John Quincy Adams\n```\n\n# Footnotes\n\nYou can add footnotes to your content by using this bracket syntax \u003Ckbd>`[^1]`\u003C/kbd> and then defining the footnote at the bottom of your content.\n\n```text\nThe invention of the printing press revolutionized the spread of information in Europe during the 15th century.[^2].\n\n[^2]: Johannes Gutenberg is credited with inventing the movable-type printing press around 1440 in Mainz, Germany.\n```\n\n# Preview \n\nYou can preview your markdown content in real-time by using the preview feature in the editor. We have been using it throughout this guide to show you how your markdown content will look when rendered. It comes with a single prop, \u003Ckbd>codeblock\u003C/kbd>, that you can use to display the code block right below the preview.\n\n```tsx\n\u003CPreview>\n  \u003Cdiv className=\"bg-gray-2 border-gray-4 border w-32 h-16 rounded\"/>\n\u003C/Preview>\n```\n\n# Inline Code\n\nAppend \u003Ckbd>`{:lang}{:js}`\u003C/kbd> (e.g. \u003Ckbd>`{:js}{:js}`\u003C/kbd>) to the end of inline code to highlight it like a regular code block.\n\n```text\nThis is an array `[1, 2, 3]{:js}` of numbers 1 through 3.\n```\n\n\n# Code Blocks\n\nTo format code or text into its own distinct block, use triple backticks.\n \n```text\n```tsx  \nfunction feature() {\n  return \"It works in my environment.\";\n}\n```‎\n```\n\n# Media\n\nYou can embed images, videos, and other media in your markdown content. You can also add captions to your images via the \u003Ckbd>`\u003CImage/>`\u003C/kbd> component.\n\n\u003CImage src='https://avatar.vercel.sh/sylph' alt='Placeholder' caption='Avatar'/>\n```text\n\u003CImage src='https://avatar.vercel.sh/sylph' alt='Placeholder' caption='Avatar'/>\n```\n\n# Tables\n\nYou can create tables by assembling a list of words and dividing them with hyphens \u003Ckbd>-\u003C/kbd> (for the first row), and then separating each column with a pipe \u003Ckbd>|\u003C/kbd>.\n\n```text\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n```\n\n[^1]: Github, [\"Basic Writing and Formatting Syntax\"](https://docs.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax) Github, 2024. [Accessed: 19-Sep-2024].","src/content/posts/basic-formatting-and-syntax-2.mdx","c2b3a11efd17be56","basic-formatting-and-syntax-2.mdx","basic-formatting-and-syntax",{"id":33,"data":35,"body":39,"filePath":40,"digest":41,"legacyId":42,"deferredRender":28},{"title":36,"excerpt":15,"tags":37,"coverImage":21,"time":38,"published":28},"Basic Writing and Formatting Syntax",[17,18,19,20],{"created":26,"updated":27},"# Introduction\n\nMarkdown and Mdx parsing is supported via `unified`, and other remark and rehype packages. `next-mdx-remote` allows us to parse `.mdx` and `.md` files in a more flexible manner without touching webpack.\n\nGitHub flavored markdown is used. `mdx-prism` provides syntax highlighting capabilities for code blocks. Here's a demo of how everything looks.\n\nThe following markdown cheatsheet is adapted from: https://guides.github.com/features/mastering-markdown/\n\n# What is Markdown?\n\nMarkdown is a way to style text on the web. You control the display of the document; formatting words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in, like `#` or `*`.\n\n# Syntax guide\n\nHere’s an overview of Markdown syntax that you can use anywhere on GitHub.com or in your own text files.\n\n## Headers\n\n```\n# This is a h1 tag\n\n## This is a h2 tag\n\n#### This is a h4 tag\n```\n\n# This is a h1 tag\n\n## This is a h2 tag\n\n#### This is a h4 tag\n\n## Emphasis\n\n```\n_This text will be italic_\n\n**This text will be bold**\n\n_You **can** combine them_\n```\n\n_This text will be italic_\n\n**This text will be bold**\n\n_You **can** combine them_\n\n## Lists\n\n### Unordered\n\n```\n- Item 1\n- Item 2\n  - Item 2a\n  - Item 2b\n```\n\n- Item 1\n- Item 2\n  - Item 2a\n  - Item 2b\n\n### Ordered\n\n```\n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n```\n\n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n\n## Images\n\n```\n![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png)\nFormat: ![Alt Text](url)\n```\n\n![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png)\n\n## Links\n\n```\nhttp://github.com - automatic!\n[GitHub](http://github.com)\n```\n\nhttp://github.com - automatic!\n[GitHub](http://github.com)\n\n## Blockquotes\n\n```\nAs Kanye West said:\n\n> We're living the future so\n> the present is our past.\n```\n\nAs Kanye West said:\n\n> We're living the future so\n> the present is our past.\n\n## Inline code\n\n```\nI think you should use an\n`\u003Caddr>` element here instead.\n```\n\nI think you should use an\n`\u003Caddr>` element here instead.\n\n## Syntax highlighting\n\nHere’s an example of how you can use syntax highlighting with [GitHub Flavored Markdown](https://help.github.com/articles/basic-writing-and-formatting-syntax/):\n\n````\n```js:fancyAlert.js\nfunction fancyAlert(arg) {\n  if (arg) {\n    $.facebox({ div: '#foo' })\n  }\n}\n```\n````\n\nAnd here's how it looks - nicely colored with styled code titles!\n\n```js /facebox/\nfunction fancyAlert(arg) {\n  if (arg) {\n    $.facebox({ div: '#foo' })\n  }\n}\n```\n\n## Footnotes\n\n```\nHere is a simple footnote[^1]. With some additional text after it.\n\n[^1]: My reference.\n```\n\nHere is a simple footnote[^1]. With some additional text after it.\n\n[^1]: My reference.\n\n## Task Lists\n\n```\n- [x] list syntax required (any unordered or ordered list supported)\n- [x] this is a complete item\n- [ ] this is an incomplete item\n```\n\n- [x] list syntax required (any unordered or ordered list supported)\n- [x] this is a complete item\n- [ ] this is an incomplete item\n\n## Tables\n\nYou can create tables by assembling a list of words and dividing them with hyphens `-` (for the first row), and then separating each column with a pipe `|`:\n\n```\n| First Header                | Second Header                |\n| --------------------------- | ---------------------------- |\n| Content from cell 1         | Content from cell 2          |\n| Content in the first column | Content in the second column |\n```\n\n| First Header                | Second Header                |\n| --------------------------- | ---------------------------- |\n| Content from cell 1         | Content from cell 2          |\n| Content in the first column | Content in the second column |\n\n## Strikethrough\n\nAny word wrapped with two tildes (like `~~this~~`) will appear ~~crossed out~~.\n\n## MDX Component Usage Example\n\nWithout import, will be converted by mdx-component.tsx\n\n\u003CImage src='https://www.uisnippet.dev/gyoza-shop.jpg' alt='Placeholder' caption='Gyoza Shop from uisnippet.dev'/>\n\n---","src/content/posts/basic-formatting-and-syntax.mdx","5e6c95267ab7f2be","basic-formatting-and-syntax.mdx","nextjs-14-guide",{"id":43,"data":45,"body":54,"filePath":55,"digest":56,"legacyId":57,"deferredRender":28},{"title":46,"excerpt":47,"tags":48,"coverImage":21,"author":51,"time":52,"published":28},"Getting Started with Next.js 14","Explore the new features and improvements in Next.js 14, including the App Router and Server Components.",[49,17,50],"Next.js","Tutorial",{"name":23,"avatar":24},{"created":53,"updated":53},"2023-12-25T10:00:00Z","## Introduction to Next.js 14\n\nNext.js 14 represents a significant leap forward in the evolution of the React framework, introducing groundbreaking features and performance improvements that make it even more powerful for building modern web applications. In this comprehensive guide, we'll explore what's new and how to make the most of these enhancements.\n\n## Key Features in Next.js 14\n\n### App Router\n\nThe App Router is now the default routing system in Next.js 14, offering a more intuitive and powerful way to handle routing in your applications.\n\n```jsx\n// app/page.tsx\nexport default function HomePage() {\n  return \u003Ch1>Welcome to Next.js 14\u003C/h1>\n}\n\n// app/blog/[slug]/page.tsx\nexport default function BlogPost({ params }) {\n  return \u003Ch1>Post: {params.slug}\u003C/h1>\n}\n```\n\n### Server Components\n\nServer Components are a game-changing feature that allows you to render components on the server, reducing the JavaScript bundle size and improving performance.\n\n```jsx\n// This component will be rendered on the server\nasync function BlogPosts() {\n  const posts = await getPosts() // Server-side data fetching\n  \n  return (\n    \u003Cul>\n      {posts.map(post => (\n        \u003Cli key={post.id}>{post.title}\u003C/li>\n      ))}\n    \u003C/ul>\n  )\n}\n```\n\n## Performance Improvements\n\n### Turbopack Updates\n\nNext.js 14 includes significant improvements to Turbopack, making it even faster for development and production builds.\n\n### Streaming and Suspense\n\nEnhanced support for streaming and Suspense allows for better loading states and improved user experience.\n\n```jsx\nimport { Suspense } from 'react'\nimport Loading from './loading'\n\nexport default function Page() {\n  return (\n    \u003CSuspense fallback={\u003CLoading />}>\n      \u003CSlowComponent />\n    \u003C/Suspense>\n  )\n}\n```\n\n## Migration Guide\n\nIf you're upgrading from an earlier version of Next.js, here are the key steps to follow:\n\n1. Update your dependencies\n2. Switch to the App Router (if not already using it)\n3. Convert to Server Components where appropriate\n4. Update your build configuration\n\n## Best Practices\n\n### File-based Routing\n\nTake advantage of the new file-based routing system for better organization:\n\n```text\napp/\n  layout.tsx\n  page.tsx\n  blog/\n    page.tsx\n    [slug]/\n      page.tsx\n  about/\n    page.tsx\n```\n\n### Data Fetching\n\nUtilize the new data fetching methods for optimal performance:\n\n```jsx\n// Server Component\nasync function getData() {\n  const res = await fetch('https://api.example.com/data')\n  return res.json()\n}\n\nexport default async function Page() {\n  const data = await getData()\n  return \u003Cmain>{/* Use data */}\u003C/main>\n}\n```\n\n## Conclusion\n\nNext.js 14 brings significant improvements to the developer experience and application performance. By adopting these new features and following the recommended patterns, you can build faster, more scalable applications with less complexity.","src/content/posts/nextjs-14-guide.mdx","159e5615f47a67a8","nextjs-14-guide.mdx","typescript-react-tips",{"id":58,"data":60,"body":69,"filePath":70,"digest":71,"legacyId":72,"deferredRender":28},{"title":61,"excerpt":62,"tags":63,"coverImage":21,"author":67,"time":68,"published":28},"TypeScript Tips for React Developers","Essential TypeScript patterns and techniques that every React developer should know for building type-safe applications.",[64,17,65,66],"TypeScript","Best Practices","Development",{"name":23,"avatar":24},{"created":53,"updated":53},"## Introduction\n\nTypeScript has become an essential tool in modern React development, providing type safety and improved developer experience. This guide covers essential TypeScript patterns and best practices specifically for React applications.\n\n## Type-Safe Props\n\n### Basic Props Interface\n\nStart with properly typing your component props:\n\n```tsx\ninterface UserCardProps {\n  name: string;\n  email: string;\n  age?: number; // Optional prop\n  onProfileClick: (userId: string) => void;\n}\n\nconst UserCard: React.FC\u003CUserCardProps> = ({ name, email, age, onProfileClick }) => {\n  return (\n    \u003Cdiv onClick={() => onProfileClick(name)}>\n      \u003Ch2>{name}\u003C/h2>\n      \u003Cp>{email}\u003C/p>\n      {age && \u003Cp>Age: {age}\u003C/p>}\n    \u003C/div>\n  );\n};\n```\n\n### Generic Components\n\nCreate reusable components with generics:\n\n```tsx\ninterface ListProps\u003CT> {\n  items: T[];\n  renderItem: (item: T) => React.ReactNode;\n}\n\nfunction List\u003CT>({ items, renderItem }: ListProps\u003CT>) {\n  return (\n    \u003Cul>\n      {items.map((item, index) => (\n        \u003Cli key={index}>{renderItem(item)}\u003C/li>\n      ))}\n    \u003C/ul>\n  );\n}\n```\n\n## State Management with TypeScript\n\n### useState with Type Inference\n\n```tsx\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nconst [user, setUser] = useState\u003CUser | null>(null);\n```\n\n### useReducer with Discriminated Unions\n\n```tsx\ntype Action =\n  | { type: 'SET_LOADING' }\n  | { type: 'SET_DATA'; payload: string[] }\n  | { type: 'SET_ERROR'; payload: string };\n\ninterface State {\n  loading: boolean;\n  data: string[] | null;\n  error: string | null;\n}\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: true };\n    case 'SET_DATA':\n      return { ...state, loading: false, data: action.payload };\n    case 'SET_ERROR':\n      return { ...state, loading: false, error: action.payload };\n  }\n};\n```\n\n## Custom Hooks\n\n### Type-Safe Custom Hooks\n\n```tsx\ninterface UseApiResponse\u003CT> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n}\n\nfunction useApi\u003CT>(url: string): UseApiResponse\u003CT> {\n  const [data, setData] = useState\u003CT | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState\u003Cstring | null>(null);\n\n  useEffect(() => {\n    fetchData();\n  }, [url]);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(url);\n      const json = await response.json();\n      setData(json);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { data, loading, error };\n}\n```\n\n## Event Handling\n\n### Typing Event Handlers\n\n```tsx\nconst handleChange = (event: React.ChangeEvent\u003CHTMLInputElement>) => {\n  console.log(event.target.value);\n};\n\nconst handleSubmit = (event: React.FormEvent\u003CHTMLFormElement>) => {\n  event.preventDefault();\n  // Form submission logic\n};\n```\n\n## Best Practices\n\n### Use Type Assertions Sparingly\n\nOnly use type assertions when you know more about the type than TypeScript does:\n\n```tsx\n// Avoid\nconst element = document.getElementById('root') as HTMLElement;\n\n// Better\nconst element = document.getElementById('root');\nif (element === null) throw new Error('Root element not found');\n```\n\n### Leverage Utility Types\n\nTypeScript provides several utility types that are helpful in React development:\n\n```tsx\n// Make all properties optional\ntype PartialUser = Partial\u003CUser>;\n\n// Make all properties required\ntype RequiredUser = Required\u003CUser>;\n\n// Pick specific properties\ntype UserNameAndEmail = Pick\u003CUser, 'name' | 'email'>;\n\n// Omit specific properties\ntype UserWithoutId = Omit\u003CUser, 'id'>;\n```\n\n## Conclusion\n\nUsing TypeScript with React not only provides better type safety but also improves the development experience through better tooling and documentation. By following these patterns and best practices, you can write more maintainable and robust React applications.","src/content/posts/typescript-react-tips.mdx","833953853498ab64","typescript-react-tips.mdx","react-performance-optimization",{"id":73,"data":75,"body":80,"filePath":81,"digest":82,"legacyId":83,"deferredRender":28},{"title":76,"excerpt":15,"tags":77,"coverImage":21,"author":78,"time":79,"published":28},"Optimizing React Performance",[17,18,19,20],{"name":23,"avatar":24},{"created":53,"updated":53},"## Introduction\n\nPerformance optimization is crucial for delivering a great user experience in React applications. This guide covers practical techniques and strategies to improve your React application's performance, from code splitting to rendering optimizations.\n\n## Code Splitting\n\n### Dynamic Imports\n\nUse dynamic imports to split your code into smaller chunks:\n\n```jsx\nimport { lazy, Suspense } from 'react';\n\nconst HeavyComponent = lazy(() => import('./HeavyComponent'));\n\nfunction App() {\n  return (\n    \u003CSuspense fallback={\u003CLoadingSpinner />}>\n      \u003CHeavyComponent />\n    \u003C/Suspense>\n  );\n}\n```\n\n### Route-based Code Splitting\n\nImplement code splitting at the route level:\n\n```jsx\nimport { lazy } from 'react';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst Dashboard = lazy(() => import('./pages/Dashboard'));\nconst Settings = lazy(() => import('./pages/Settings'));\n\nconst routes = [\n  {\n    path: '/',\n    component: Home\n  },\n  {\n    path: '/dashboard',\n    component: Dashboard\n  },\n  {\n    path: '/settings',\n    component: Settings\n  }\n];\n```\n\n## Rendering Optimization\n\n### React.memo\n\nPrevent unnecessary re-renders with React.memo:\n\n```jsx\nconst ExpensiveComponent = React.memo(({ data }) => {\n  // Complex rendering logic\n  return (\n    \u003Cdiv>\n      {data.map(item => (\n        \u003CItem key={item.id} {...item} />\n      ))}\n    \u003C/div>\n  );\n});\n```\n\n### useMemo and useCallback\n\nCache expensive computations and callbacks:\n\n```jsx\nfunction SearchResults({ items, query }) {\n  // Cache filtered results\n  const filteredItems = useMemo(() => {\n    return items.filter(item => \n      item.name.toLowerCase().includes(query.toLowerCase())\n    );\n  }, [items, query]);\n\n  // Cache callback\n  const handleItemClick = useCallback((id) => {\n    console.log(`Item clicked: ${id}`);\n  }, []);\n\n  return (\n    \u003Cul>\n      {filteredItems.map(item => (\n        \u003CListItem\n          key={item.id}\n          item={item}\n          onClick={handleItemClick}\n        />\n      ))}\n    \u003C/ul>\n  );\n}\n```\n\n## State Management Optimization\n\n### State Colocation\n\nKeep state as close as possible to where it's used:\n\n```jsx\n// Bad: State too high in the tree\nfunction ParentComponent() {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    \u003Cdiv>\n      \u003COtherComponent />\n      \u003CModalComponent isOpen={isOpen} setIsOpen={setIsOpen} />\n    \u003C/div>\n  );\n}\n\n// Good: State colocated with usage\nfunction ModalComponent() {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    \u003Cdiv>\n      \u003Cbutton onClick={() => setIsOpen(true)}>Open Modal\u003C/button>\n      {isOpen && \u003CModal onClose={() => setIsOpen(false)} />}\n    \u003C/div>\n  );\n}\n```\n\n### Context Optimization\n\nSplit contexts to prevent unnecessary re-renders:\n\n```jsx\n// Split theme and user contexts\nconst ThemeContext = React.createContext(null);\nconst UserContext = React.createContext(null);\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  const [user, setUser] = useState(null);\n\n  return (\n    \u003CThemeContext.Provider value={{ theme, setTheme }}>\n      \u003CUserContext.Provider value={{ user, setUser }}>\n        \u003CMainContent />\n      \u003C/UserContext.Provider>\n    \u003C/ThemeContext.Provider>\n  );\n}\n```\n\n## Virtual List\n\nImplement virtual scrolling for long lists:\n\n```jsx\nimport { FixedSizeList } from 'react-window';\n\nfunction VirtualList({ items }) {\n  const Row = ({ index, style }) => (\n    \u003Cdiv style={style}>\n      \u003CListItem data={items[index]} />\n    \u003C/div>\n  );\n\n  return (\n    \u003CFixedSizeList\n      height={400}\n      width={300}\n      itemCount={items.length}\n      itemSize={50}\n    >\n      {Row}\n    \u003C/FixedSizeList>\n  );\n}\n```\n\n## Image Optimization\n\n### Lazy Loading Images\n\nUse lazy loading for images below the fold:\n\n```jsx\nfunction ImageGallery({ images }) {\n  return (\n    \u003Cdiv>\n      {images.map(image => (\n        \u003Cimg\n          key={image.id}\n          src={image.url}\n          loading=\"lazy\"\n          alt={image.alt}\n        />\n      ))}\n    \u003C/div>\n  );\n}\n```\n\n## Performance Monitoring\n\n### React DevTools Profiler\n\nUse the React DevTools Profiler to identify performance bottlenecks:\n\n```jsx\nimport { Profiler } from 'react';\n\nfunction onRenderCallback(\n  id,\n  phase,\n  actualDuration,\n  baseDuration,\n  startTime,\n  commitTime\n) {\n  console.log(`Component ${id} took ${actualDuration}ms to render`);\n}\n\nfunction App() {\n  return (\n    \u003CProfiler id=\"App\" onRender={onRenderCallback}>\n      \u003CMainContent />\n    \u003C/Profiler>\n  );\n}\n```\n\n## Conclusion\n\nPerformance optimization in React is an ongoing process that requires careful consideration of component structure, state management, and resource loading. By implementing these techniques strategically, you can significantly improve your application's performance and user experience.\n\nRemember to:\n- Measure before optimizing\n- Focus on the most impactful optimizations first\n- Test performance improvements across different devices and network conditions\n- Monitor performance metrics in production","src/content/posts/react-performance-optimization.mdx","694ca8a815949993","react-performance-optimization.mdx","scalable-react-apps",{"id":84,"data":86,"body":93,"filePath":94,"digest":95,"legacyId":96,"deferredRender":28},{"title":87,"excerpt":88,"tags":89,"coverImage":21,"author":91,"time":92,"published":28},"Building Scalable React Applications: A Complete Guide","Learn the best practices and patterns for building large-scale React applications that are maintainable and performant.",[17,90,65,18],"Architecture",{"name":23,"avatar":24},{"created":53,"updated":53},"## Introduction\n\nBuilding scalable React applications is a challenge many developers face as their projects grow in size and complexity. This comprehensive guide will walk you through the best practices, architectural patterns, and tools that can help you create maintainable and performant React applications that scale with your needs.\n\nWhether you're starting a new project or looking to improve an existing one, the principles and techniques covered in this article will help you build React applications that can grow without becoming unwieldy or difficult to maintain.\n\n## Project Structure and Organization\n\nOne of the first challenges in building scalable React applications is deciding how to structure your project. A well-organized project structure makes it easier to find files, understand the codebase, and add new features.\n\n### Feature-Based Structure\n\nInstead of organizing files by type (components, reducers, actions, etc.), consider organizing them by feature or domain. This approach groups related files together, making it easier to understand and modify a specific feature.\n\n```text\nsrc/\n  features/\n    authentication/\n      components/\n      hooks/\n      services/\n      types/\n      utils/\n    dashboard/\n      components/\n      hooks/\n      services/\n      types/\n      utils/\n  shared/\n    components/\n    hooks/\n    services/\n    types/\n    utils/\n  app/\n    App.tsx\n    routes.tsx\n```\n\n## State Management Strategies\n\nAs your application grows, managing state becomes increasingly complex. Here are some strategies to help you manage state effectively in large React applications.\n\n### Local vs. Global State\n\nNot all state needs to be global. Keep state as close to where it's used as possible. Use local component state for UI-specific state that doesn't need to be shared, and only lift state up when necessary.\n\n### State Management Libraries\n\nFor global state, consider using a state management library like Redux, Zustand, or Jotai. Each has its own strengths and trade-offs, so choose one that fits your project's needs.\n\n## Performance Optimization\n\nPerformance is crucial for a good user experience, especially as your application grows. Here are some techniques to keep your React application performant at scale.\n\n### Code Splitting\n\nCode splitting allows you to split your code into smaller chunks that can be loaded on demand, reducing the initial load time of your application. React.lazy and Suspense make it easy to implement code splitting in React.\n\n```jsx\nimport React, { Suspense } from 'react';\n\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    \u003Cdiv>\n      \u003CSuspense fallback={\u003Cdiv>Loading...\u003C/div>}>\n        \u003CLazyComponent />\n      \u003C/Suspense>\n    \u003C/div>\n  );\n}\n```\n\n### Memoization\n\nUse React.memo, useMemo, and useCallback to prevent unnecessary re-renders and expensive calculations. However, be careful not to over-optimize, as memoization itself has a cost.\n\n## Testing Strategies\n\nA comprehensive testing strategy is essential for maintaining a large React application. Here are some approaches to testing that scale well with your application.\n\n### Component Testing\n\nUse component tests to verify that your components render correctly and handle user interactions as expected. Libraries like React Testing Library and Jest make it easy to write and run component tests.\n\n### Integration Testing\n\nIntegration tests verify that different parts of your application work together correctly. They're valuable for testing complex features that involve multiple components and services.\n\n## Conclusion\n\nBuilding scalable React applications requires careful planning, good architecture, and attention to performance and maintainability. By following the practices outlined in this guide, you can create React applications that scale with your needs and remain maintainable as they grow.\n\nRemember that scalability is not just about handling more users or data; it's also about making your codebase easier to understand, modify, and extend over time. Invest in good practices early, and your future self (and team) will thank you.","src/content/posts/scalable-react-apps.mdx","f28f387ea2eb2f14","scalable-react-apps.mdx"]